@using Models.ViewModels
@model ItemVM

@{
    ViewData["Title"] = Model?.Item?.Id == 0 ? "Create Item" : "Edit Item";
}

<h2>@ViewData["Title"]</h2>
@if (Model.Item.Id != 0)
{
    <div class="form-group">
        <label>Remaining relist attempts:</label>
        <span class="font-weight-bold">
            @Model.RemainingRelistAttempts
        </span>
    </div>
}



@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<form asp-action="Upsert" method="post" enctype="multipart/form-data" onsubmit="return ValidateForm()">
    <div class="form-group">
        <label asp-for="Item.Name" class="control-label"></label>
        <input asp-for="Item.Name" class="form-control" />
        <span asp-validation-for="Item.Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Item.Description" class="control-label"></label>
        <textarea asp-for="Item.Description" class="form-control"></textarea>
        <span asp-validation-for="Item.Description" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Item.Condition" class="control-label"></label>
        <select asp-for="Item.Condition" class="form-control" asp-items="Html.GetEnumSelectList<ItemCondition>()">
            <option value="">-- Select Condition --</option>
        </select>
        <span asp-validation-for="Item.Condition" class="text-danger"></span>
    </div>


    <div class="form-group">
        <label asp-for="Item.Quantity" class="control-label"></label>
        <input asp-for="Item.Quantity" type="number" class="form-control" min="1" />
        <span asp-validation-for="Item.Quantity" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Item.StartingPrice" class="control-label"></label>
        <input asp-for="Item.StartingPrice" type="number" step="0.01" class="form-control" />
        <span asp-validation-for="Item.StartingPrice" class="text-danger"></span>
    </div>

    @if (User.IsInRole(Roles.Admin) && Model.Item.Id != 0)
    {
        <div class="form-group">
            <label class="control-label">Approval Status</label>
            <div>
                <input type="radio" asp-for="AuctionStatus" value="@AuctionStatus.PendingApproval" id="pendingRadio" />
                <label for="pendingRadio">Pending Approval</label>

                <input type="radio" asp-for="AuctionStatus" value="@AuctionStatus.Approved" id="approveRadio" />
                <label for="approveRadio">Approve</label>

                <input type="radio" asp-for="AuctionStatus" value="@AuctionStatus.NotApproved" id="declineRadio" />
                <label for="declineRadio">Decline</label>
            </div>
            <span asp-validation-for="AuctionStatus" class="text-danger"></span>
        </div>
    }

    <div class="form-group">
        <label asp-for="Item.CategoryId" class="control-label"></label>
        <select asp-for="Item.CategoryId" class="form-control" asp-items="@(new SelectList(ViewBag.Categories, "Id", "Name"))">
            <option value="">-- Select Category --</option>
        </select>
        <span asp-validation-for="Item.CategoryId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Item.ImageUrl" class="control-label"></label>
        <input type="hidden" asp-for="@Model.Item.ImageUrl" id="ImageUrl" value="Error" />
        @if (!string.IsNullOrEmpty(Model.Item.ImageUrl))
        {
            <img id="previewphoto" src="@Model.Item.ImageUrl" width="150" height="150" class="mb-3" />
        }
        else
        {
            <img id="previewphoto" src="" width="150" height="150" class="mb-3" style="display:none;" />
        }
        @if (Model.Item.Id == 0)
        {
            <input asp-for="Item.ImageUrl" type="file" class="form-control" name="file" required accept=".png,.jpg,.jpeg" id="imageInput" />
        }
        else
        {
            <input asp-for="Item.ImageUrl" type="file" class="form-control" name="file" accept=".png,.jpg,.jpeg" id="imageInput" />
        }
        <span id="imageError" asp-validation-for="Item.ImageUrl" class="text-danger"></span>
    </div>

    <input type="hidden" asp-for="Item.Id" />

    <button type="submit" class="btn btn-primary">
        @(Model.Item.Id == 0 ? "Create" : "Update")
    </button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script>
    // Confirmation for approval status change for admin users
    document.querySelectorAll('input[name="AuctionStatus"]').forEach(radio => {
        radio.addEventListener('change', function() {
            if (!confirm("Are you sure you want to change the approval status?")) {
                this.checked = false;
            }
        });
    });

    // Validate form to ensure image is uploaded
    function ValidateForm() {
        // Get the hidden Item.Id value
        var itemId = parseInt(document.querySelector('input[name="Item.Id"]').value);
        // Get the file input element
        var fileInput = document.getElementById('imageInput');

        // Only enforce image validation if a new item or a file is selected for an existing item
        if (itemId === 0 || fileInput.value !== "") {
            if (document.getElementById('ImageUrl').value === "Error") {
                document.getElementById('imageError').innerText = 'Please upload a valid image.';
                return false;
            }
        }
        return true;
    }

    // Preview image and validate file size (<=100KB) and dimensions (800x800)
    document.getElementById('imageInput').addEventListener('change', function (e) {
        const file = e.target.files[0];
        const imageError = document.getElementById('imageError');
        const previewPhoto = document.getElementById('previewphoto');
        imageError.innerText = ""; // Clear previous errors

        if (file) {
            // Check file size (100KB maximum)
               // Check file size (1MB maximum)
    if (file.size > 1 * 1024 * 1024) {  // 1MB = 1 * 1024 * 1024 bytes
        imageError.innerText = "Image size must be less than 1MB.";
        e.target.value = "";
        previewPhoto.src = "";
        previewPhoto.style.display = "none";
        document.getElementById('ImageUrl').value = "Error";
        return;
    }


            const reader = new FileReader();
            reader.onload = function (event) {
                const img = new Image();
                   img.onload = function () {
        // Check if dimensions are between 400x400 and 1200x1200
        if (img.width < 400 || img.height < 400 || img.width > 1200 || img.height > 1200) {
            imageError.innerText = "Image dimensions must be between 400x400 and 1200x1200 pixels.";
            e.target.value = "";
            previewPhoto.src = "";
            previewPhoto.style.display = "none";
            document.getElementById('ImageUrl').value = "Error";
            return;
        }
        // If valid, set the preview and update hidden field to indicate a valid image
        previewPhoto.src = event.target.result;
        previewPhoto.style.display = "block";
        document.getElementById('ImageUrl').value = event.target.result;
    };

                img.src = event.target.result;
            };
            reader.readAsDataURL(file);
        }
    });
</script>
